{
	"name": "df_Metadata_bronzeToSilver_MDM",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_bronze_products",
						"type": "DatasetReference"
					},
					"name": "ProductsDataIn"
				},
				{
					"dataset": {
						"referenceName": "ds_bronze_Customers",
						"type": "DatasetReference"
					},
					"name": "CustomersDataIn"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_Silver_Parquet_out",
						"type": "DatasetReference"
					},
					"name": "ProductsDataSink"
				},
				{
					"dataset": {
						"referenceName": "ds_Silver_Parquet_out",
						"type": "DatasetReference"
					},
					"name": "CustomersDataSink"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          productid as string,",
				"          productname as string,",
				"          productcategory as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductsDataIn",
				"source(output(",
				"          CustomerID as integer,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Gender as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CustomersDataIn",
				"ProductsDataIn aggregate(groupBy(productid,",
				"          productname,",
				"          productcategory),",
				"     count = count()) ~> aggregate1",
				"CustomersDataIn aggregate(groupBy(CustomerID,",
				"          {First Name},",
				"          {Last Name},",
				"          Gender),",
				"     count = count()) ~> aggregate2",
				"aggregate1 select(mapColumn(",
				"          productid,",
				"          productname,",
				"          productcategory",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"aggregate2 select(mapColumn(",
				"          CustomerID,",
				"          {First Name},",
				"          {Last Name},",
				"          Gender",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:[('Products_CleansedData.parquet')],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          productid,",
				"          productname,",
				"          productcategory",
				"     ),",
				"     partitionBy('hash', 1)) ~> ProductsDataSink",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['\\'Customers_CleansedData.parquet\\''],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          CustomerID,",
				"          First_Name = {First Name},",
				"          Last_Name = {Last Name},",
				"          Gender",
				"     )) ~> CustomersDataSink"
			]
		}
	}
}